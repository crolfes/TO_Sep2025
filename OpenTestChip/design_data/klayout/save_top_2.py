# KLayout Python Script (save_top_and_second_level_cells.py)
# Run inside KLayout: File -> Scripts -> Run...
# Or from command line:
#   klayout -b -r save_top_and_second_level_cells.py -rd input=myfile.gds -rd outdir=./cells
import pya
import os
import csv

# Get runtime parameters (can be passed with -rd)
input_file = "Seg_SG1300.gds" # pya.Application.instance().argv().get("input", "input.gds")
output_dir = "./cells"               # pya.Application.instance().argv().get("outdir", "./cells")

# Ensure output directory exists
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Create subdirectories for organization
top_dir = os.path.join(output_dir, "top_level")
second_dir = os.path.join(output_dir, "second_level")
os.makedirs(top_dir, exist_ok=True)
os.makedirs(second_dir, exist_ok=True)

# Load the layout
layout = pya.Layout()
layout.read(input_file)

max_area = 0.0
max_cell_name = None
max_cell_level = None
areas = []  # collect results for CSV

def save_cell(cell, cell_name, output_path, level_name):
    """Helper function to save a cell and calculate its area"""
    # Create a new layout for each cell
    sub_layout = pya.Layout()
    sub_layout.dbu = layout.dbu
    
    # Copy this cell (with hierarchy) to new layout
    new_cell = sub_layout.create_cell(cell_name)
    new_cell.copy_tree(cell)
    
    # Save as GDS
    sub_layout.write(output_path)
    
    # Compute bounding box area
    bbox = cell.bbox()
    if not bbox.empty():
        # Convert from dbu² to real units² (µm² if dbu = 1 nm)
        area = (bbox.width() * layout.dbu) * (bbox.height() * layout.dbu)
    else:
        area = 0.0
    
    areas.append((cell_name, area, level_name))
    print(f"Saved {level_name}: {cell_name} -> {output_path}, area = {area:.3f}")
    
    return area

# Find all top-level cells and their immediate children
top_cells = []
second_level_cells = set()

for cell in layout.each_cell():
    if cell.is_top():
        top_cells.append(cell)
        # Get immediate children (second level cells)
        for inst in cell.each_inst():
            child_cell = inst.cell
            second_level_cells.add(child_cell)

# Process top-level cells
print("Processing top-level cells...")
for cell in top_cells:
    cell_name = cell.name
    out_path = os.path.join(top_dir, f"{cell_name}.gds")
    area = save_cell(cell, cell_name, out_path, "TOP")
    
    # Track maximum area
    if area > max_area:
        max_area = area
        max_cell_name = cell_name
        max_cell_level = "TOP"

# Process second-level cells
print("\nProcessing second-level cells...")
for cell in second_level_cells:
    cell_name = cell.name
    out_path = os.path.join(second_dir, f"{cell_name}.gds")
    area = save_cell(cell, cell_name, out_path, "SECOND")
    
    # Track maximum area
    if area > max_area:
        max_area = area
        max_cell_name = cell_name
        max_cell_level = "SECOND"

# Save all areas to CSV
csv_path = os.path.join(output_dir, "cell_areas.csv")
with open(csv_path, "w", newline="") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["CellName", "Area_um2", "Level"])
    for cell_name, area, level in areas:
        writer.writerow([cell_name, f"{area:.6f}", level])

print("\n======================")
print(f"Database unit: {layout.dbu*1e9:.1f} nm")
print(f"Processed {len(top_cells)} top-level cells")
print(f"Processed {len(second_level_cells)} second-level cells")
print(f"Largest cell: {max_cell_name} ({max_cell_level}) with area {max_area:.3f} µm²")
print(f"Areas saved to: {csv_path}")
print(f"Top-level cells saved to: {top_dir}")
print(f"Second-level cells saved to: {second_dir}")
print("======================")
